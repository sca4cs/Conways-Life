{"version":3,"sources":["components/Cell.js","components/ControlButtons.js","components/GridOptions.js","components/GridDisplay.js","components/About.js","App.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleToggle","animation","state","value","setState","updateGrid","x","y","colorPicker","multicolor","colors","Math","floor","random","length","nextProps","_this2","react_default","a","createElement","className","onClick","style","background","Component","Buttons","toggleAnimation","stepForward","clearGrid","randomGrid","Options","name","type","step","speed","onChange","handleInputChange","checked","GridDisplay","make2DArray","arr","Array","cols","i","rows","j","grid","slice","round","iterations","computeNextGrid","prevGrid","nextGrid","cellState","neighbors","countNeighbors","nextIter","sum","col","row","timer","setInterval","clearInterval","e","target","defineProperty","map","cell","index","components_Cell","key","ControlButtons","GridOptions","About","App","components_GridDisplay","components_About","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.aea46770.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Cell extends Component {\n\n    constructor(props) {\n        super(props);\n        this.colors = [\"aqua\", \"blueviolet\", \"cornflowerblue\", \"coral\", \"cornsilk\", \"crimson\", \"darkcyan\", \"palegreen\", \"pink\", \"plum\", \"darkkhaki\", \"darkorchid\", \"deeppink\", \"dodgerblue\", \"fuchsia\", \"gold\", \"green\", \"greenyellow\", \"honeydew\", \"lavender\", \"lightseagreen\", \"rosybrown\"]\n        this.state = {\n            value: this.props.value,\n            x: this.props.x,\n            y: this.props.y\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({ value: nextProps.value });\n      }\n      \n\n    handleToggle = () => {\n        if (this.props.animation === 0) {\n            if (this.state.value === 1) {\n                this.setState({value: 0}); \n                this.props.updateGrid(0, this.state.x, this.state.y);\n            } else {\n                this.setState({value: 1});\n                this.props.updateGrid(1, this.state.x, this.state.y); \n            }\n        }\n    }\n\n    colorPicker = () => {\n        if (this.props.multicolor === true) {\n            let randomColor = this.colors[Math.floor(Math.random() * this.colors.length)];\n            return randomColor;\n        } else {\n            return \"#2a2b2d\";\n        }\n    }\n\n    render() {\n            return (\n            <div className=\"cell\"\n                onClick={() => this.handleToggle()}\n                style={ this.state.value === 1 ? { background: this.colorPicker() } : null }>\n            </div>\n          );\n        }\n}\n\nexport default Cell;","import React from \"react\";\n\n const Buttons = props => {\n    return (\n        <div className=\"controlButtons\">\n        <button onClick={() => props.toggleAnimation()}>Play/Pause</button>\n        <button onClick={() => props.stepForward()}>Step</button>\n        <button onClick={() => props.clearGrid()}>Clear</button>\n        <button onClick={() => props.randomGrid()}>Randomize</button>\n    </div>\n    );\n  };\n  \n export default Buttons;\n\n","import React from \"react\";\n\nconst Options = props => {\n    return (\n        <div className=\"gridOptions\">\n            <div>\n            <span>Speed in ms: </span>\n                <input\n                    name=\"speed\"\n                    type=\"number\"\n                    step=\"100\"\n                    value={props.speed}\n                    onChange={props.handleInputChange}\n                    />\n            </div>\n            <div>\n                <span>Multicolor: </span>\n                <input type=\"checkbox\" name=\"multicolor\" checked={props.multicolor} onChange={props.handleInputChange}/>\n            </div>\n        </div>\n    );\n  };\n\n\nexport default Options;\n","import React, { Component } from 'react';\nimport Cell from \"./Cell\";\nimport Buttons from \"./ControlButtons\";\nimport Options from \"./GridOptions\";\n\n class GridDisplay extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            grid: [],\n            timer: 0,\n            iterations: 0,\n            cols: 15,\n            rows: 15,\n            speed: 300,\n            multicolor: false\n        }\n    }\n\n     componentDidMount() {\n        let arr = this.make2DArray();\n        this.setState({ grid: arr });\n    }\n\n     make2DArray = () => {\n        let arr = new Array(this.state.cols);\n        for (let i = 0; i < arr.length; i++) {\n            arr[i] = new Array(this.state.rows);\n        }\n        for (let i = 0; i < this.state.cols; i++) {\n            for (let j = 0; j < this.state.rows; j++) {\n                arr[i][j] = { value: 0, x: i, y: j };\n            }\n        } \n        return arr;\n    }\n\n     randomGrid = () => {\n        let arr = this.state.grid.slice();\n         for (let i = 0; i < this.state.cols; i++) {\n            for (let j = 0; j < this.state.rows; j++) {\n                arr[i][j].value = Math.round(Math.random());\n            }                     // random 0 or 1\n        } \n         this.setState({ grid: arr, iterations: 0 });\n    }\n\n     clearGrid = () => {\n        let arr = this.state.grid.slice();\n         for (let i = 0; i < this.state.cols; i++) {\n            for (let j = 0; j < this.state.rows; j++) {\n                arr[i][j].value = 0;\n            }\n        } \n         this.setState({ grid: arr, iterations: 0 });\n    }\n\n     computeNextGrid = () => {\n        let prevGrid = this.state.grid;\n        let nextGrid = this.make2DArray();\n        \n        for (let i = 0; i < this.state.cols; i++) {\n            for (let j = 0; j < this.state.rows; j++) {\n                let cellState = prevGrid[i][j].value;\n                // Count live neighbors\n                let neighbors = this.countNeighbors(prevGrid, i, j);\n        \n                if (cellState === 0 && neighbors === 3) {\n                nextGrid[i][j].value = 1;\n                } else if (cellState === 1 && (neighbors < 2 || neighbors >= 4)) {\n                nextGrid[i][j].value = 0;\n                } else if (cellState === 1 && (neighbors === 3 || neighbors === 2)){\n                nextGrid[i][j].value = 1;\n                } else {\n                nextGrid[i][j].value = cellState;\n                }\n        \n            }\n        }\n            let nextIter = this.state.iterations;\n            nextIter++;\n        \n            this.setState({ grid: nextGrid, iterations: nextIter });\n    }\n\n     countNeighbors = (grid, x, y) => {\n        let sum = 0;\n        for (let i = -1; i < 2; i++) {\n            for (let j = -1; j < 2; j++) {\n            // edges wrap around\n            let col = (x + i + this.state.cols) % this.state.cols;\n            let row = (y + j + this.state.rows) % this.state.rows;\n            sum += grid[col][row].value;\n            }\n        }\n        // subtract the center cell\n        sum -= grid[x][y].value;\n        return sum;\n    }\n\n     updateGrid = (value, x, y) => {\n        let arr = this.state.grid.slice();\n  \n        arr[x][y].value = value;\n        this.setState({ grid: arr });\n    }\n\n     toggleAnimation = () => {\n        let speed = this.state.speed;\n        if (speed < 30) {\n            speed = 30;\n        }\n        if (this.state.timer === 0) {\n            let timer = setInterval(this.computeNextGrid, speed);\n            this.setState({timer: timer});\n        } else {\n            clearInterval(this.state.timer);\n            this.setState({timer: 0});\n        }\n    }\n\n    handleInputChange = e => {\n        const target = e.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n    \n        this.setState({ [name]: value });\n      }\n\n    render() {\n            return (\n            <div className=\"mainContainer\">\n                <h2>Conway's Game of Life</h2>\n                <p>Generation: {this.state.iterations}</p>\n                 <div className=\"gridContainer\">\n                    {this.state.grid.map(row => \n                        row.map((cell, index) => \n                        <Cell\n                            key={index}\n                            value={cell.value}\n                            x={cell.x}\n                            y={cell.y}\n                            multicolor={this.state.multicolor}\n                            animation={this.state.timer}\n                            updateGrid={this.updateGrid}/>\n                    ))}\n                </div>\n                <Buttons\n                    randomGrid={this.randomGrid}\n                    clearGrid={this.clearGrid}\n                    stepForward={this.computeNextGrid}\n                    toggleAnimation={this.toggleAnimation}\n                    />\n                <Options\n                    speed={this.state.speed}\n                    multicolor={this.state.multicolor}\n                    handleInputChange={this.handleInputChange}\n                />\n            </div>\n          );\n        }\n}\n\nexport default GridDisplay;","import React from \"react\";\n\nconst About = props => {\n    return (\n        <div className=\"aboutInfo\">\n            <div className=\"aboutSection\">\n                <h4>Rules</h4>\n                <ul>\n                    <li>If a cell is alive and it has exactly 2 or 3 neighbors, it stays alive.</li>\n                    <li>If a cell is alive and it has less than 2 or more than 3 live neighbors, it dies.</li>\n                    <li>If a cell is dead and it has exactly 3 live neighbors, it comes to life.</li>\n                </ul>\n            </div>\n            <div className=\"aboutSection\">\n                <h4>Cellular Automaton</h4>\n                <p>\n                A cellular automaton is a collection of cells whose values change over time, as specified by a \n                pre-determined set of rules. In a 2-dimensional model, cells are often represented as squares on a grid.\n                A cell's value changes based on the state of its neighboring cells, and the rules of change are applied\n                iteratively until the simulation stops running. For this example, a cell's neighbors includes all 8\n                surrounding cells, and cells on the edge of the grid \"wrap around\" to consider the cells on the other\n                side of the grid. This program is modeled after John Conway's Game of Life, outlined in 1970.\n                </p>\n            </div> \n        </div>\n    );\n  };\n\n\nexport default About;","import React, { Component } from 'react';\nimport GridDisplay from './components/GridDisplay';\nimport About from './components/About';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <GridDisplay />\n        <About />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}